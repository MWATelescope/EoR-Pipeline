params {
    obsids_path = 'obsids.csv'
    obsids_suffix = ''
    quality_updates_path = 'quality-updates.csv'
    tile_updates_path = 'tile-updates.csv'

    // set to 1 to include ppds in downloaded metafits
    metafits_incl_ppds = 0
    noppds = true

    sky_chans = 131..154

    // filter obsids
    // filter_pointings = null
    // filter_pointings = [0,2,4]
    // filter_pointings = [3,1,0,2,4]
    filter_sweet_pointings = null
    // filter_sweet_pointings = [0,2,4,10,12]
    filter_ew_pointings = null
    // filter_ew_pointings = [-3,-2,-1,0,1,2,3]

    // filter_bad_tile_frac = 1.01/128 // stage 1 (0.79%)
    // filter_bad_tile_frac = 2.01/128 // stage 2 (1.57%)
    // filter_bad_tile_frac = 3.01/128 // stage 3 (2.35%)
    // filter_bad_tile_frac = 5.01/128 // stage 4 (3.91%)
    // filter_bad_tile_frac = 7.01/128 // stage 5 (5.48%)
    filter_bad_tile_frac = 16.01/128 // max (12.5%)
    // filter_bad_tile_frac = 1 // inf
    // filter_dead_dipole_frac = 36.01/(16*256) // stage Na (0.89%)
    filter_dead_dipole_frac = null
    // filter_dead_dipole_frac = 80.01/(16*256) // max (1.95%)
    // filter_dead_dipole_frac = 1 // inf
    // max filtered: 6291
    // stage1b: 1 tiles, 80 dips: 1092
    // stage2a: 2 tiles, 36 dips: 1847
    // stage2b: 2 tiles, 80 dips: 2080
    // stage3a: 3 tiles, 36 dips: 2946
    filter_quality = 1

    filter_config = ['Phase I']

    filter_eorfield = null
    filter_eorband = null
    filter_ra = null
    filter_dec = null
    filter_ionoqa = null
    filter_sun_elevation = null
    filter_min_sun_pointing_distance = null

    // asvo
    asvo_api_key = "${MWA_ASVO_API_KEY}"

    // prep
    noprep = false
    pullPrep = true // pull prep from acacia if available
    prep_time_res_s = 2
    prep_freq_res_khz = 40
    prep_rfi = true
    // prep_freq_res_khz = 80
    noprepqa = false // use --nopreqa to disable prepVisQA and flagQA
    nossins = false
    noprepqafilter = false // when you want to do prepVisQA but not use its filter
    noautoplot = true

    // flag qa
    noflag = false
    ssins_by_rx = false // add extra ssins plots for each rx
    // ssins_unflagged_only = false // only use unflagged tiles in ssins
    flag_occupancy_threshold = 0.25
    rfi_occupancy_threshold = 0.25
    ssins_occupancy_threshold = 0.25
    ssins_narrow_threshold = 0.0
    ssins_dab_threshold = 0.0
    ssins_streak_threshold = 0.0
    ssins_apply = false

    // calibration
    nocal = false // use --nocal to skip calibration
    nophasefits = false // use --nophasefits to disable phase fit analysis
    fitphase = false // use --fitphase to apply fitted phases
    pullCalSol = false // pull calsol from acacia if available
    noManualFlags = false // use --noManualFlags to disable reading flags from tile updates csv
    noPrepFlags = false // use --noPrepFlags to disable flags from prepVisQA
    noCalFlags = false // use --noCalFlags to disable flags from calQA
    noplotcalqa = false
    cal_suffix = '' // string to add to the end of the cal directory
    // hyperdrive di-cal args
    // - key: short name that appears in calibration solution filename
    // - value: args for hyperdrive di-cal
    dical_args = [
        "30l_src4k_300it": "--uvw-min 30l -n 4000 --max-iterations 300 --stop-thresh 1e-20",
        // "50l_src4k": "--uvw-min 50l -n 4000",
        // "30l_src1k": "--uvw-min 30l -n 1000",
        // "30l_src400": "--uvw-min 30l -n 400",
        // "30l_src100": "--uvw-min 30l -n 100",
        // "30l_src4k_fast": "--uvw-min 30l -n 4000 --max-iterations 10 --min-thresh 1e-2",
        // "30l_src10_fast": "--uvw-min 30l -n 10 --max-iterations 10 --min-thresh 1e-2",
        // "30l_src4_fast": "--uvw-min 30l -n 4 --max-iterations 10 --min-thresh 1e-2",
    ]
    // mwa-reduce calibrate args
    rexcal_args = [
        "30l_src100" : "",
    ]

    beam_path = '<!!!>' // path/of/mwa_full_embedded_element_pattern.h5
    sourcelist = '<!!!>' // path/of/sourcelist.txt
    hyp_srclist_args = '--source-dist-cutoff=90 --veto-threshold 0.005'
    hyp_dical_args = ""
    // hyp_dical_args = "--max-iterations 300 --stop-thresh 1e-8"
    hyp_sols_plot_args = '--no-ref-tile'

    hyp_peel_args = '--num-passes 5 --num-loops 6 --convergence 0.5'

    // apply
    noapply = false
    apply_time_res = 8
    apply_freq_res = 80
    apply_args = ''
    nosub = false
    noionosub = false
    sub_nsrcs = 8000
    ionosub_nsrcs = 1000
    nocluster = true
    nodut1 = false // use --ignore-dut1 in hyperdrive apply

    // file types
    noms = true
    nouv = false

    // vis analysis
    noeor = true
    nopsmetrics = false
    nodelayspec = true
    nopowerspec = false
    noplotvisqa = false
    nouvplot = true
    autoplot_args = '' // e.g. "--log_scale --transparent"
    filter_max_ps_window = 20 // filter visibilities with too much window power
    filter_max_ps_ratio = 0.1 // filter unsubtracted visibilities with too much window:wedge ratio
    filter_max_ps_wedge_sub = 0.3 // filter subtracted visibilities which subtract too little wedge power
    filter_max_ps_win_sub = 1.0 // filter subtracted visibilities which subtract too little window power
    filter_min_ps_win_sub = 0.1 // filter subtracted visibilities which subtract too much window power
    filter_max_hyp_ionoqa = null

    // imaging - dirty
    noimg = false
    img_suffix = ''
    img_weight = 'briggs -1.0' // 'briggs +0.5' brings out diffuse
    img_size = 4096
    img_scale = '40asec'
    img_channels_out = '4 -join-channels'
    img_intervals_out = '1'
    img_split_intervals = false
    img_split_coarse_chans = false
    img_pol = 'xx,yy,v' // -join-polarizations needs 2-4 polarizations
    // img_pol = 'IQUV -join-polarizations'
    // img_pol = 'xx,yy,xy,yx,q,u,v'
    wsclean_args = ''
    chgcentre_args = ''

    // imaging - dconv only
    nodeconv = false
    wsclean_dconv_args = '-multiscale'
    img_niter = 1000  // https://wsclean.readthedocs.io/en/latest/basic_cleaning.html#threshold-and-maximum-number-of-iterations
    img_minor_clean_gain = 0.1
    img_major_clean_gain = 0.5  // https://wsclean.readthedocs.io/en/latest/basic_cleaning.html#using-cotton-schwab-the-mgain-parameter
    img_auto_threshold = 1  // https://wsclean.readthedocs.io/en/latest/basic_cleaning.html#automatic-threshold
    img_auto_mask = 5  // https://wsclean.readthedocs.io/en/latest/masking.html
    img_mwa_path = '<!!!>' // path containing `mwa_full_embedded_element_pattern.h5`, can be symlink

    // image previews
    krvis = false
    nothumbnail = false
    thumbnail_quantile = 0.95
    thumbnail_vmin = null
    thumbnail_vmax = null
    thumbnail_args = ''
    thumbnail_uvs = false
    thumbnail_psfs = false
    thumbnail_all_chans = false
    thumbnail_limits = true

    nopolcomp = true
    nomontage = true
    montage_by_pol = false
    montage_by_sub = false

    // img videos: by default, only make videos for MFS thumbnails, polcomps and polmontages.
    frame_chan_scan = false // make a video for each obsid, pol, img product scanning through channels
    frame_obs_scan = false // make a video for each channel, pol, img product scanning through obsids

    // imgqa
    noimgqa = false
    noplotimgqa = false

    filter_max_vrms_box = 0.01 // filter images with too much stokes V RMS
    filter_max_pks_int_v_ratio = 0.0033 // filter images with too much integrated pks V power compared to (XX+YY)
    filter_max_pks_int_diff = 0.5 // filter images with too much difference between xx and yy integrated pks flux
    filter_max_pks_int_sub_ratio = 0.2 // filter images which don't subtract enough integrated pks flux
    filter_max_pks_int_sub = 0.5 // filter subtracted images which have too much integrated pks flux

    noimgcombine = true
    nostackthumbs = true

    // chips
    nochips = false
    nochipscombine = true
    groupByPointing = false
    groupByLst = false
    lssaObs = false // lssa individual obs without combine
    chunkSize = 80 // number of obs in each chunk ()
    chunkRemainder = true // allow incomplete chunks
    chunkCount = 50 // limit number of chunks in each group
    lssa_bias_mode = 0 // 10 does high band
    lssa_bin = 'lssa_fg_simple'
    // lssa_bin = 'lssa_fg_nfft'

    // results
    result_suffix = ''

    // novideo = false // use `--novideo=true` to skip video generation
    novideo = true

    // archive
    tarchive = false
    archive = false // use `--archive=true` to enable archiving
    archive_prep = false // use `--archive_prep=true` to enable archiving of preprocessed vis
    archive_uvfits = false // use `--archive_uvfits=true` to enable archiving of calibrated vis
    bucket_prefix = "mwaeor:high0"
    // bucket_prefix = "dev:mwaeor0high"

    // defaults for shims
    hyperdrive = 'hyperdrive'
    birli = 'birli'
    giant_squid = 'giant-squid'
    jq = 'jq'
    ps_metrics = "ps_metrics"
    proxy_prelude = ''
    wsclean = 'wsclean'
    chgcentre = 'chgcentre'
    mwa_reduce = ''

    // misc defaults
    num_gpus = 1

    // singularity urls
    birli_sif = 'docker://mwatelescope/birli:latest'
    giant_squid_sif = 'docker://mwatelescope/giant-squid:latest'
    // hyperdrive_sif = 'docker://d3vnull0/mwa_hyperdrive:peel'
    // hyperdrive_sif = 'docker://d3vnull0/mwa_hyperdrive:dev-cuda11.4.3-cascadelake'
    // hyperdrive_sif = 'docker://d3vnull0/mwa_hyperdrive:peel-cuda11.4.3-cc70-x86-64-v2'
    hyperdrive_sif = 'docker://d3vnull0/mwa_hyperdrive:peel-experiment'
    mwa_qa_sif = 'docker://d3vnull0/mwa_qa:latest'
    fitcal_sif = 'docker://d3vnull0/fitcal:latest'
    tap_sif = 'docker://d3vnull0/tap:latest'
    cotter_sif = 'docker://mwatelescope/cotter:latest'
    casa_sif = 'docker://d3vnull0/casa:latest'
    wsclean_sif = 'docker://paulhancock/wsclean:2.10.0-build-1'
    ffmpeg_sif = 'docker://jrottenberg/ffmpeg:latest'
    mwa_reduce_sif = ''
    imagemagick_sif = 'docker://dpokidov/imagemagick:latest'
    ssins_sif = 'docker://d3vnull0/ssins:latest'
    mwax_mover_sif = 'docker://d3vnull0/mwax_mover:latest'
    chips_sif = 'docker://d3vnull0/chips:latest'
    chips_wrappers_sif = 'docker://d3vnull0/chips:latest'
}
process {
    errorStrategy = 'ignore'
    afterScript = 'set -x; ls -alh'
}
executor {
    exitReadTimeout = '5min'
    $slurm {
        queueSize = 10
        jobName = { "nf-${task.process.split(':')[-1]}.${task.tag}" }
    }
}
profiles {
    hpc_data { // aka zeus
        singularity {
            cacheDir = "/astro/${PAWSEY_PROJECT}/${USER}/singularity"
            enabled = true
            runOptions = '-B /astro'
        }
        executor.$slurm.queueSize = 50
        process {
            executor = 'slurm'
            queue = 'copyq'
            // memory = '60G'
            // scratch = 'ram-disk'
            // stageInMode = 'copy'
            // stageOutMode = 'copy'
            scratch = false
            clusterOptions = "--account=${PAWSEY_PROJECT}"
            withLabel: rclone {
                module = 'rclone'
            }
        }
        params {
            outdir = "/astro/${PAWSEY_PROJECT}/${USER}/nfdata"
            giant_squid_sif = '/pawsey/mwa/singularity/giant-squid/giant-squid_latest.sif'
            singularity_prefix = '[ $(command -v singularity) ] || module load singularity; singularity exec --bind /astro'
            giant_squid = "${params.singularity_prefix} ${params.giant_squid_sif} /opt/cargo/bin/giant-squid"
        }
    }
    garrawarla {
        singularity {
            cacheDir = "/astro/${PAWSEY_PROJECT}/${USER}/singularity"
            runOptions = "--home \$PWD --cleanenv --bind /pawsey --bind /astro"
            enabled = true
            autoMounts = true
        }
        executor {
            $slurm {
                queueSize = 100
                jobName = { "nf-${task.process.split(':')[-1]}.${task.tag}" }
            }
        }
        params {
            outdir = "/astro/${PAWSEY_PROJECT}/${USER}/nfdata"
            resultsdir = "/astro/${PAWSEY_PROJECT}/${USER}/nfresults"
            // nvme_prelude = "chown ${USER}:${PAWSEY_PROJECT} ."
            // hyperdrive_prelude = "module use /pawsey/mwa/software/python3/modulefiles; module load hyperdrive/peel"
            // chips_prelude = "module use /pawsey/mwa/software/python3/modulefiles; module load chips/cmt"

            // sifs
            // birli_sif = '/pawsey/mwa/singularity/birli/birli_latest.sif'
            giant_squid_sif = '/pawsey/mwa/singularity/giant-squid/giant-squid_latest.sif'  // docker://mwatelescope/giant-squid:latest
            mwa_qa_sif = '/pawsey/mwa/singularity/mwa_qa/mwa_qa_latest.sif'  // docker://d3vnull0/mwa_qa:latest
            // cotter_sif = '/pawsey/mwa/singularity/cotter/cotter_latest.sif'
            // casa_sif = '/pawsey/mwa/singularity/casa/casa.img'X~
            casa_sif = '/pawsey/mwa/singularity/casa5/casa5.sif'
            // wsclean_sif = '/pawsey/mwa/singularity/wsclean/wsclean.img'
            // ffmpeg_sif = '/pawsey/mwa/singularity/ffmpeg/ffmpeg_latest.sif'
            mwa_reduce_sif = '/pawsey/mwa/singularity/mwa-reduce/mwa-reduce.img'  // docker://d3vnull0/mwa-reduce:latest
            // imagemagick_sif = '/pawsey/mwa/singularity/imagemagick/imagemagick_latest.sif'
            ssins_sif = '/pawsey/mwa/singularity/ssins/ssins_latest.sif'  // docker://d3vnull0/ssins:latest
            tap_sif = '/pawsey/mwa/singularity/tap/tap_latest.sif'  // docker://d3vnull0/tap:latest
            mwax_mover_sif = '/pawsey/mwa/singularity/mwax_mover/mwax_mover_latest.sif'  // docker://d3vnull0/mwax_mover:latest
            chips_sif = '/pawsey/mwa/singularity/chips/chips_latest.sif'  // docker://d3vnull0/chips:latest
            chips_wrappers_sif = '/pawsey/mwa/singularity/chips_wrappers/chips_wrappers_latest.sif'  // docker://d3vnull0/chips_wrappers:latest


            // binaries
            singularity_prefix = '[ $(command -v singularity) ] || module load singularity; singularity exec --bind /astro --bind /pawsey'
            // hyperdrive = 'module use /pawsey/mwa/software/python3/modulefiles; module load hyperdrive; hyperdrive'
            birli = "${params.singularity_prefix} --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.birli_sif} /opt/cargo/bin/birli"
            giant_squid = "${params.singularity_prefix} ${params.giant_squid_sif} /opt/cargo/bin/giant-squid"
            jq = "/astro/mwaeor/dev/bin/jq"
            // wsclean = '${params.singularity_prefix} ${params.wsclean_sif} wsclean'
            casa = "${params.singularity_prefix} --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.casa_sif} casa"
            ps_metrics = 'ps_metrics'
            mwa_reduce = "singularity exec -B /pawsey/mwa:/usr/lib/python3/dist-packages/mwapy/data ${params.mwa_reduce_sif}"

            // calibration
            // sourcelist = '/pawsey/mwa/software/python3/srclists/master/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            // sourcelist = '/pawsey/mwa/mwaeor/dev/srclists/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            sourcelist = '/astro/mwaeor/software/LoBES/srclist_pumav3_EoR0LoBES_EoR1pietro_CenA-GP_2023-11-07.yaml'
            // beam_path = '/pawsey/mwa/mwa_full_embedded_element_pattern.h5'
            beam_path = '/pawsey/mwa/MWA_embedded_element_pattern_rev2_interp_167_197MHz.h5'
            img_mwa_path = '/pawsey/mwa'
        }
        process {
            executor = 'slurm'
            queue = 'workq'
            cpus = 2 // about 1/18 of a node
            memory = 10.GB // about 1/18 of a node
            time = 15.minute
            clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --account=${PAWSEY_PROJECT}" }
            scratch = 'ram-disk'
            stageInMode = 'copy'
            stageOutMode = 'move'
            beforeScript = 'set -x; chown ${USER}:${PAWSEY_PROJECT} ${NXF_SCRATCH:="."}; chmod g+rs ${NXF_SCRATCH:="."}; module use /pawsey/mwa/software/python3/modulefiles; module use /astro/mwaeor/software/modulefiles; hostname'
            // jobs which actually make use of multiprocessing
            withLabel: cpu_quarter {
                cpus = 9
            }
            withLabel: cpu_half {
                cpus = 18
            }
            // jobs which will need maximum cpu count
            withLabel: cpu_full {
                cpus = 36
            }
            withLabel: mem_tiny {
                memory = 1.GB
            }
            // jobs which need a bit more memory
            withLabel: mem_quarter {
                memory = 90.GB
            }
            withLabel: mem_half {
                memory = 180.GB
            }
            // jobs which will need maximum memory
            withLabel: mem_full {
                memory = 360.GB
            }
            // processes which handle big files that don't fit in ramdisk
            withLabel: nvme {
                scratch = "/nvmetmp/"
                clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --account=${PAWSEY_PROJECT} --tmp=100G" }
            }
            withLabel: nvme_full {
                scratch = "/nvmetmp/"
                clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --account=${PAWSEY_PROJECT} --tmp=880G" }
            }
            withLabel: gpu {
                queue = 'gpuq'
                clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --account=${PAWSEY_PROJECT}  --gres=gpu:1" }
            }
            withLabel: gpu_nvme {
                scratch = "/nvmetmp/"
                queue = 'gpuq'
                clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --account=${PAWSEY_PROJECT}  --gres=gpu:1 --tmp=100G" }
            }
            // salloc --nodes=1 --mem=1G --time=1:00:00 --clusters=setonix --partition=copy --account=mwaeor --tasks 1 --cpus-per-task=1
            withLabel: datamover {
                scratch = 'ram-disk'
                stageInMode = "symlink"
                module = 'rclone'
                cpus = 1
                maxForks = 8
                memory = 8.GB
                time = 2.hour
                clusterOptions = { "--nodes=1 --cpus-per-task=${task.cpus} --account=${PAWSEY_PROJECT}" }
                queue = 'copyq'
            }
            withLabel: rate_limit {
                maxForks = 5
            }
            withLabel: hyperdrive {
                // module = 'hyperdrive/peel'
                module = 'singularity'
                container = "${params.hyperdrive_sif}"
                containerOptions = '--nv'
            }
            withLabel: wsclean {
                module = 'wsclean/2.9'
            }
            withLabel: mwa_reduce {
                module = 'singularity'
                container = "${params.mwa_reduce_sif}"
            }
            withLabel: python {
                module = 'singularity'
                container = "${params.mwa_qa_sif}"
            }
            withLabel: fitcal {
                module = 'singularity'
                container = "${params.fitcal_sif}"
            }
            withLabel: casa {
                module = 'singularity'
                container = "${params.casa_sif}"
            }
            withLabel: tap {
                module = 'singularity'
                container = "${params.tap_sif}"
            }
            withLabel: rclone {
                module = 'rclone'
            }
            withLabel: chips {
                module = 'singularity'
                container = "${params.chips_sif}"
                afterScript = 'for log in $(ls -t syslog*.txt *.log); do echo "-> head $log"; head -n 100 $log; echo "-> tail $log"; tail -n 100 $log; done; ls -alh; du -hd0'
            }
            withLabel: chips_wrappers {
                module = 'singularity'
                container = "${params.chips_wrappers_sif}"
            }
            withLabel: ffmpeg {
                module = 'singularity'
                container = "${params.ffmpeg_sif}"
            }
            withLabel: imagemagick {
                module = 'singularity'
                container = "${params.imagemagick_sif}"
            }
            withLabel: ssins {
                module = 'singularity'
                container = "${params.ssins_sif}"
            }
            withLabel: mwax_mover {
                module = 'singularity'
                container = "${params.mwax_mover_sif}"
            }
        }
    }
    dug {
        singularity {
            cacheDir = '/data/curtin_mwaeor/singularity'
        }
        executor {
            $slurm {
                queueSize = 200
                // submitRateLimit = '1/30s'
                jobName = { "nf-${task.process.split(':')[-1]}.${task.tag}" }
                exitReadTimeout = '5min'
            }
        }
        process {
            scratch = '$TMPDIR_SHM'
            executor = 'slurm'
            queue = 'curtin_mwaeor'
            cpus = 18
            memory = '60G'
            clusterOptions = '--constraint=knl&nogpu'
            stageInMode = 'copy'
            stageOutMode = 'copy'
            withLabel: cpu {
                cpus = 36
            }
            withLabel: wsclean {
                // cpus = 60
                clusterOptions = '--constraint=clx&nogpu'
            }
            withLabel: hyperdrive {
                module = 'cuda/11.3.1:gcc-rt/9.2.0'
                clusterOptions = "--constraint='v100'"
            }
            withLabel: python {
                module = 'miniconda/4.8.3'
                conda = '/data/curtin_mwaeor/sw/conda/dev'
            }
            withLabel: rclone {
                module = 'rclone'
            }
            withLabel: chips {
                module = 'cfitsio/3.470'
            }
            withLabel: python {
                conda "${params.astro_conda}"
            }
        }
        params {
            outdir = '/data/curtin_mwaeor/data'
            proxy_prelude = 'export http_proxy="http://proxy.per.dug.com:3128" https_proxy="http://proxy.per.dug.com:3128" all_proxy="proxy.per.dug.com:3128" ftp_proxy="http://proxy.per.dug.com:3128"'

            // sifs
            // birli_sif = '/data/curtin_mwaeor/sw/singularity/birli/birli_mwaf.sif'
            // mwa_qa_sif = '/data/curtin_mwaeor/sw/singularity/mwa_qa/mwa_qa_latest.sif'
            // cotter_sif = '/data/curtin_mwaeor/sw/singularity/cotter/cotter_latest.sif'
            // casa_sif = '/data/curtin_mwaeor/sw/singularity/casa/casa_latest.sif'

            // binaries
            hyperdrive = '/data/curtin_mwaeor/sw/bin/hyperdrive'
            birli = "singularity exec --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.birli_sif} /opt/cargo/bin/birli"
            giant_squid = '/data/curtin_mwaeor/sw/bin/giant-squid'
            jq = '/data/curtin_mwaeor/sw/bin/jq'
            wsclean = '/data/curtin_mwaeor/sw/bin/wsclean'
            // wsclean = '/data/curtin_mwaeor/sw/wsclean/3.1-knl-icc/bin/wsclean'
            // wsclean = 'module use /data/curtin_mwaeor/sw/modules; module load wsclean/3.1-knl-icc; /data/curtin_mwaeor/sw/wsclean/3.1-knl-icc/bin/wsclean -j 60'
            // wsclean = 'module use /data/curtin_mwaeor/sw/modules; module load wsclean/3.1-knl-icc; mpirun -np 30 /data/curtin_mwaeor/sw/wsclean/3.1-knl-icc/bin/wsclean-mp'
            casa = "singularity exec --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.casa_sif} /usr/bin/casa"
            ps_metrics = "/data/curtin_mwaeor/src/chips/src/ps_metrics"

            // calibration
            sourcelist = '/data/curtin_mwaeor/data/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            beam_path = '/data/curtin_mwaeor/data/mwa_full_embedded_element_pattern.h5'
            // todo: can't determine this from nvidia-smi
            // cuda_compute = 80 // a100
            cuda_compute = 70 // v100
        }
    }
    sirius {
        process {
            scratch = '/tmp/mwaeor'
            executor = 'local'
        }
        params {
            outdir = '/data/dev'
            hyperdrive = '/usr/local/bin/hyperdrive'
            sourcelist = '/data/dev/calibration/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2.txt'
            beam_path = '/data/dev/calibration/mwa_full_embedded_element_pattern.h5'
            cuda_compute = 75
        }
    }
    gacrux {
        process {
            scratch = '/tmp/mwaeor'
            executor = 'local'
            beforeScript = 'set -x; pwd'
        }
        executor {
            queueSize = 10
        }
        params {
            outdir = '/data/dev'
            wsclean = '/usr/bin/wsclean'
            // TODO: ps_metrics
            nopsmetrics = true
            nouv = true
            sourcelist = '/opt/cal/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            beam_path = '/opt/cal/mwa_full_embedded_element_pattern.h5'
            cuda_compute = 86
        }
        withLabel: python {
            conda = "/home/dev/astroconda"
        }
        withLabel: hyperdrive {
            maxForks = 1
        }
        withLabel: wsclean {
            maxForks = 1
        }
    }
}
// trace {
//     overwrite = true
//     enabled = true
//     file = 'trace.tsv'
//     fields = 'task_id,hash,process,tag,status,exit,duration,realtime,cpus,memory,disk,queue,container'
// }
params {
    obsids_path = 'obsids.csv'
    obsids_suffix = ''
    quality_updates_path = 'quality-updates.csv'
    tile_updates_path = 'tile-updates.csv'

    // set to 1 to include ppds in downloaded metafits
    metafits_incl_ppds = 0

    sky_chans = 131..154

    // filter obsids
    filter_pointings = [0,2,4]
    // filter_bad_tile_frac = 1.01/128 // stage 1 (0.79%)
    // filter_bad_tile_frac = 2.01/128 // stage 2 (1.57%)
    // filter_bad_tile_frac = 3.01/128 // stage 3 (2.35%)
    // filter_bad_tile_frac = 5.01/128 // stage 4 (3.91%)
    // filter_bad_tile_frac = 7.01/128 // stage 5 (5.48%)
    // filter_bad_tile_frac = 32.01/128 // max (12.5%)
    filter_bad_tile_frac = 1 // inf
    // filter_dead_dipole_frac = 36.01/(16*256) // stage Na (0.89%)
    // filter_dead_dipole_frac = 80.01/(16*256) // max (1.95%)
    filter_dead_dipole_frac = 1 // inf
    // max filtered: 6291
    // stage1b: 1 tiles, 80 dips: 1092
    // stage2a: 2 tiles, 36 dips: 1847
    // stage2b: 2 tiles, 80 dips: 2080
    // stage3a: 3 tiles, 36 dips: 2946
    filter_quality = 1

    // asvo
    asvo_api_key = "${MWA_ASVO_API_KEY}"

    // prep
    noprep = false
    prep_time_res_s = 2
    prep_freq_res_khz = 40
    // prep_freq_res_khz = 80
    noprepqa = false // use --noprepvisqa to disable prepVisQA and flagQA

    // flag qa
    noflag = false
    flag_occupancy_threshold = 0.25

    // calibration
    nocal = false // use --nocal to skip calibration
    nopoly = true // use --nopoly=false to enable poly fit
    pullCalSol = true // pull calsol from acacia if available
    noManualFlags = false // use --noManualFlags to disable reading flags from tile updates csv
    noPrepFlags = false // use --noPrepFlags to disable flags from prepVisQA
    cal_suffix = '' // string to add to the end of the cal directory
    // hyperdrive di-cal args
    // - key: short name that appears in calibration solution filename
    // - value: args for hyperdrive di-cal
    dical_args = [
        "30l_src4k": "--uvw-min 30l -n 4000",
        // "30l_src1k": "--uvw-min 30l -n 1000",
        // "30l_src400": "--uvw-min 30l -n 400",
        // "30l_src100": "--uvw-min 30l -n 100",
        // "30l_src4k_fast": "--uvw-min 30l -n 4000 --max-iterations 10 --min-thresh 1e-2",
        // "30l_src10_fast": "--uvw-min 30l -n 10 --max-iterations 10 --min-thresh 1e-2",
        // "30l_src4_fast": "--uvw-min 30l -n 4 --max-iterations 10 --min-thresh 1e-2",
    ]
    // mwa-reduce calibrate args
    rexcal_args = [
        "30l_src100" : "",
    ]

    beam_path = 'i need to be set in profile'
    sourcelist = 'i need to be set in profile'

    // apply
    noapply = false
    nosub = false
    // - key: name of calibration
    // - value[0]: short name that appears in apply
    // - value[1]: args for hyperdrive apply
    apply_args = [
        // "30l_src4k": ["2s_80kHz", "--time-average 2s --freq-average 80kHz"],
        "poly_30l_src4k": ["8s_80kHz", "--time-average 8s --freq-average 80kHz"],
        "30l_src4k": ["8s_80kHz", "--time-average 8s --freq-average 80kHz"],
    ]

    // file types
    noms = false
    nouv = false

    // vis analysis
    nopsmetrics = false

    // imaging
    noimg = false
    img_suffix = ''
    img_weight = 'briggs -1.0'
    // img_weight = 'briggs +0.5'
    img_size = 2048
    img_scale = '40asec'
    img_niter = 0
    img_auto_threshold = 1
    img_auto_mask = 5
    img_mem = 100
    img_channels_out = 24
    wsclean_args = ''
    chgcentre_args = ''

    // results
    result_suffix = ''

    // archive
    archive = false // use `--archive=true` to enable archiving
    archive_prep = false // use `--archive_prep=true` to enable archiving of preprocessed vis
    archive_uvfits = false // use `--archive_uvfits=true` to enable archiving of calibrated vis
    bucket_prefix = "mwaeor:high0"
    // bucket_prefix = "dev:mwaeor0high"

    // defaults for shims
    hyperdrive = 'hyperdrive'
    birli = 'birli'
    giant_squid = 'giant-squid'
    jq = 'jq'
    ps_metrics = "echo 'todo:ps_metrics'; exit 1; echo"
    proxy_prelude = ''
    wsclean = 'export OPENBLAS_NUM_THREADS=1; wsclean'
    chgcentre = 'chgcentre'

    // misc defaults
    num_gpus = 1
}
process {
    errorStrategy = 'ignore'
    beforeScript = 'pwd; hostname'
    afterScript = 'set -x; ls -al'
}
executor {
    $slurm {
        queueSize = 10
        jobName = { "nf-${task.process.split(':')[-1]}.${task.tag}" }
        exitReadTimeout = '5min'
    }
}
profiles {
    hpc_data { // aka zeus
        singularity {
            cacheDir = "/astro/mwaeor/${USER}/singularity"
            enabled = true
            runOptions = '-B /astro'
        }
        executor.$slurm.queueSize = 50
        process {
            executor = 'slurm'
            queue = 'copyq'
            // memory = '60G'
            // scratch = 'ram-disk'
            // stageInMode = 'copy'
            // stageOutMode = 'copy'
            scratch = false
            clusterOptions = "--account=${PAWSEY_PROJECT}"
            withLabel: rclone {
                module = 'rclone'
            }
        }
        params {
            outdir = "/astro/mwaeor/${USER}/nfdata"
            giant_squid_sif = '/pawsey/mwa/singularity/giant-squid/giant-squid_latest.sif'
            singularity_prefix = '[ $(command -v singularity) ] || module load singularity; singularity exec --bind /astro'
            giant_squid = "${params.singularity_prefix} ${params.giant_squid_sif} /opt/cargo/bin/giant-squid"
        }
    }
    garrawarla {
        singularity {
            cacheDir = "/astro/mwaeor/${USER}/singularity"
            enabled = true
            runOptions = '-B /astro'
        }
        executor.$slurm.queueSize = 100
        params {
            outdir = "/astro/mwaeor/${USER}/nfdata"

            // sifs
            birli_sif = '/pawsey/mwa/singularity/birli/birli_latest.sif'
            giant_squid_sif = '/pawsey/mwa/singularity/giant-squid/giant-squid_latest.sif'
            mwa_qa_sif = '/pawsey/mwa/singularity/mwa_qa/mwa_qa_latest.sif'
            cotter_sif = '/pawsey/mwa/singularity/cotter/cotter_latest.sif'
            casa_sif = 'pawsey/mwa/singularity/casa/casa.img'
            wsclean_sif = '/pawsey/mwa/singularity/wsclean/wsclean.img'
            ffmpeg_sif = '/pawsey/mwa/singularity/ffmpeg/ffmpeg_latest.sif'
            mwa_reduce_sif = '/pawsey/mwa/singularity/mwa-reduce/mwa-reduce.img'
            imagemagick_sif = '/pawsey/mwa/singularity/imagemagick/imagemagick_latest.sif'
            ssins_sif = '/pawsey/mwa/singularity/ssins/ssins_latest.sif'

            // binaries
            singularity_prefix = '[ $(command -v singularity) ] || module load singularity; singularity exec --bind /astro'
            // hyperdrive = 'module use /pawsey/mwa/software/python3/modulefiles; module load hyperdrive; hyperdrive'
            birli = "${params.singularity_prefix} --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.birli_sif} /opt/cargo/bin/birli"
            giant_squid = "${params.singularity_prefix} ${params.giant_squid_sif} /opt/cargo/bin/giant-squid"
            jq = "/astro/mwaeor/dev/bin/jq"
            // wsclean = '${params.singularity_prefix} ${params.wsclean_sif} wsclean'
            casa = "${params.singularity_prefix} --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.casa_sif} /usr/bin/casa"
            ps_metrics = '/astro/mwaeor/dev/chips/bin/ps_metrics'
            calibrate = "singularity exec -B /pawsey/mwa:/usr/lib/python3/dist-packages/mwapy/data ${params.mwa_reduce_sif} calibrate"

            // calibration
            sourcelist = '/astro/mwaeor/dev/calibration/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            beam_path = '/pawsey/mwa/mwa_full_embedded_element_pattern.h5'
            wsclean_args = '-mwa-path /astro/mwaeor/jline/software'
        }
        process {
            executor = 'slurm'
            queue = 'workq'
            cpus = 18
            memory = '60G'
            clusterOptions = "--nodes=1 --ntasks-per-node=1 --account=${PAWSEY_PROJECT}"
            scratch = 'ram-disk'
            stageInMode = 'copy'
            stageOutMode = 'copy'
            withLabel: cpu {
                cpus = 36
            }
            withLabel: hyperdrive {
                queue = 'gpuq'
                clusterOptions = "--nodes=1 --ntasks-per-node=1 --account=${PAWSEY_PROJECT} --gres=gpu:1"
                beforeScript = 'pwd; hostname; module use /pawsey/mwa/software/python3/modulefiles; module load hyperdrive/chj;'
            }
            withLabel: wsclean {
                cpus = 36
                queue = 'gpuq'
                clusterOptions = "--tmp=500G --nodes=1 --ntasks-per-node=1 --account=${PAWSEY_PROJECT} --gres=gpu:1"
                module = 'wsclean/2.9:idg/0.7'
                memory = '350G'
            }
            withLabel: python {
                container = "${params.mwa_qa_sif}"
                beforeScript = 'pwd; hostname; module load singularity;'
            }
            withLabel: rclone {
                module = 'rclone'
            }
            withLabel: chips {
                module = 'cfitsio/3.48:intel-mkl/19.0.5:lapack/3.8.0:fftw/3.3.8'
            }
            withLabel: ffmpeg {
                container = "${params.ffmpeg_sif}"
                beforeScript = 'pwd; hostname; module load singularity;'
            }
            withLabel: imagemagick {
                container = "${params.imagemagick_sif}"
                beforeScript = 'pwd; hostname; module load singularity;'
            }
            withLabel: ssins {
                container = "${params.ssins_sif}"
                beforeScript = 'pwd; hostname; module load singularity;'
                memory = '120G'
            }
        }
    }
    dug {
        singularity {
            cacheDir = '/data/curtin_mwaeor/singularity'
        }
        executor {
            $slurm {
                queueSize = 200
                // submitRateLimit = '1/30s'
                jobName = { "nf-${task.process.split(':')[-1]}.${task.tag}" }
                exitReadTimeout = '5min'
            }
        }
        process {
            scratch = '$TMPDIR_SHM'
            executor = 'slurm'
            queue = 'curtin_mwaeor'
            cpus = 18
            memory = '60G'
            clusterOptions = '--constraint=knl&nogpu'
            stageInMode = 'copy'
            stageOutMode = 'copy'
            withLabel: cpu {
                cpus = 36
            }
            withLabel: wsclean {
                // cpus = 60
                clusterOptions = '--constraint=clx&nogpu'
            }
            withLabel: hyperdrive {
                module = 'cuda/11.3.1:gcc-rt/9.2.0'
                clusterOptions = "--constraint='v100'"
            }
            withLabel: python {
                module = 'miniconda/4.8.3'
                conda = '/data/curtin_mwaeor/sw/conda/dev'
            }
            withLabel: rclone {
                module = 'rclone'
            }
            withLabel: chips {
                module = 'cfitsio/3.470'
            }
        }
        params {
            outdir = '/data/curtin_mwaeor/data'
            proxy_prelude = 'export http_proxy="http://proxy.per.dug.com:3128" https_proxy="http://proxy.per.dug.com:3128" all_proxy="proxy.per.dug.com:3128" ftp_proxy="http://proxy.per.dug.com:3128"'

            // sifs
            birli_sif = '/data/curtin_mwaeor/sw/singularity/birli/birli_mwaf.sif'
            mwa_qa_sif = '/data/curtin_mwaeor/sw/singularity/mwa_qa/mwa_qa_latest.sif'
            cotter_sif = '/data/curtin_mwaeor/sw/singularity/cotter/cotter_latest.sif'
            casa_sif = '/data/curtin_mwaeor/sw/singularity/casa/casa_latest.sif'

            // binaries
            hyperdrive = '/data/curtin_mwaeor/sw/bin/hyperdrive'
            birli = "singularity exec --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.birli_sif} /opt/cargo/bin/birli"
            giant_squid = '/data/curtin_mwaeor/sw/bin/giant-squid'
            jq = '/data/curtin_mwaeor/sw/bin/jq'
            wsclean = '/data/curtin_mwaeor/sw/bin/wsclean'
            // wsclean = '/data/curtin_mwaeor/sw/wsclean/3.1-knl-icc/bin/wsclean'
            // wsclean = 'module use /data/curtin_mwaeor/sw/modules; module load wsclean/3.1-knl-icc; /data/curtin_mwaeor/sw/wsclean/3.1-knl-icc/bin/wsclean -j 60'
            // wsclean = 'module use /data/curtin_mwaeor/sw/modules; module load wsclean/3.1-knl-icc; mpirun -np 30 /data/curtin_mwaeor/sw/wsclean/3.1-knl-icc/bin/wsclean-mp'
            casa = "singularity exec --bind \$PWD:/tmp --writable-tmpfs --pwd /tmp --home \$PWD --cleanenv ${params.casa_sif} /usr/bin/casa"
            ps_metrics = "/data/curtin_mwaeor/src/chips/src/ps_metrics"

            // calibration
            sourcelist = '/data/curtin_mwaeor/data/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            beam_path = '/data/curtin_mwaeor/data/mwa_full_embedded_element_pattern.h5'
            // todo: can't determine this from nvidia-smi
            // cuda_compute = 80 // a100
            cuda_compute = 70 // v100
        }
    }
    sirius {
        process {
            scratch = '/tmp/mwaeor'
            executor = 'local'
        }
        params {
            outdir = '/data/dev'
            hyperdrive = '/usr/local/bin/hyperdrive'
            sourcelist = '/data/dev/calibration/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2.txt'
            beam_path = '/data/dev/calibration/mwa_full_embedded_element_pattern.h5'
            cuda_compute = 75
        }
    }
    gacrux {
        process {
            scratch = '/tmp/mwaeor'
            executor = 'local'
            beforeScript = 'set -x; pwd'
        }
        executor {
            queueSize = 10
        }
        params {
            outdir = '/data/dev'
            wsclean = '/usr/bin/wsclean'
            // TODO: ps_metrics
            nopsmetrics = true
            nouv = true
            sourcelist = '/opt/cal/srclist_pumav3_EoR0LoBESv2_fixedEoR1pietro+ForA_phase1+2_edit.txt'
            beam_path = '/opt/cal/mwa_full_embedded_element_pattern.h5'
            cuda_compute = 86
        }
        withLabel: python {
            conda = "/home/dev/astroconda"
        }
        withLabel: hyperdrive {
            maxForks = 1
        }
        withLabel: wsclean {
            maxForks = 1
        }
    }
}